<Module>
  <ModulePrefs title= " Nutaku Test ">
    <Require feature="opensocial-0.8" /> 
    <Require feature="opensocial-payment" /> 
    <Require feature="dynamic-height"/>
    <Require feature="nutaku" /> 
    <Link rel="payment.handler" href="http://aom18-sandbox.ignite-ga.me/api/payment/handle" />
  </ModulePrefs>
  <Content type="html" view="canvas" preferred_width="1260">
    <![CDATA[
    <script src="http://underscorejs.org/underscore-min.js"></script>
    <script type="text/javascript">
    function init() {
      console.log('gadgets.util.registerOnLoadHandler called');
      gadgets.window.adjustHeight();
    }

    function doChangeAspecRatio() {
      var ca = document.getElementById("canvas");
      var r = ca.width / ca.height;
      if (r > 1.5) {
        ca.width = ca.height * 1.5;
      } else {
        ca.height = ca.width / 1.5;
      }
    }

    function setAspectRatio() {
      var ca = document.getElementById("canvas");
      ca.addEventListener("fullscreenchange", doChangeAspecRatio, false);
      ca.addEventListener("mozfullscreenchange", doChangeAspecRatio, false);
      ca.addEventListener("webkitfullscreenchange", doChangeAspecRatio, false);
      ca.addEventListener("MSFullscreenChange", doChangeAspecRatio, false);
      document.addEventListener("mozfullscreenchange", doChangeAspecRatio, false);
      document.addEventListener("MSFullscreenChange", doChangeAspecRatio, false);
      document.addEventListener("webkitfullscreenchange", doChangeAspecRatio, false);
      document.addEventListener("fullscreenchange", doChangeAspecRatio, false);
    }

    function makeSignedRequest() {
      var params = {};
      params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
      params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
      params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues({
        id: 123456789
      });
      params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
      gadgets.io.makeRequest("http://aom18-sandbox.ignite-ga.me/api/payment/handle", function(obj) {}, params);
    }

    function requestPayment(object) {
      //var object = '{\"Id\":\"diamonds_500\",\"ItemName\":\"500 Gems\",\"ItemDesc\":\"11% More Gems\",\"Price\":500.0}';
      var itemParams = {};
      var jsonObj = JSON.parse(object);

      itemParams[opensocial.BillingItem.Field.SKU_ID] = jsonObj.Id;

      itemParams[opensocial.BillingItem.Field.PRICE] = jsonObj.Price;

      itemParams[opensocial.BillingItem.Field.COUNT] = 1;
      itemParams[opensocial.BillingItem.Field.DESCRIPTION] = jsonObj.ItemDesc;
      itemParams[nutaku.BillingItem.Field.NAME] = jsonObj.ItemName;
      itemParams[nutaku.BillingItem.Field.IMAGE_URL] = "http://aomhcdn.ignite-ga.me/purchasable_item_thumbnail/" + jsonObj.Id + ".png";

      var item = opensocial.newBillingItem(itemParams);
      var params = {};
      params[opensocial.Payment.Field.ITEMS] = [item];
      params[opensocial.Payment.Field.PAYMENT_TYPE] = opensocial.Payment.PaymentType.PAYMENT;
      var payment = opensocial.newPayment(params);
      opensocial.requestPayment(payment, function(response) {
        if (response.hadError()) {
          // error 
          console.error('error when request payment');
          // console.error(response);
          // console.error(response.getData());
          var errorJson = {}
          errorJson.errorCode = response.getErrorCode();
          errorJson.errorMessage = response.getErrorMessage();
          var responseObj = {
            "Text": JSON.stringify(errorJson),
            "Rc": 200
          };
          var msg = {
            "Key": "paymentResponseError",
            "Ro": responseObj
          }
          SendMessage("WebGLResponse", "paymentResponseError", JSON.stringify(msg));
        } else {
          console.log("requestPayment callback: success");
          var payment = response.getData();
          var items = payment.getField('items');
          var paymentJson = {};
          paymentJson.Id = items[0].fields_.skuId;
          paymentJson.ItemName = items[0].fields_.name;
          paymentJson.ItemDesc = items[0].fields_.description;
          paymentJson.Price = items[0].fields_.price;
          paymentJson.ResponseMsg = payment.getField('responseCode');
          var responseObj = {
            "Text": JSON.stringify(paymentJson),
            "Rc": 200
          };
          var msg = {
            "Key": "paymentResponseSuccess",
            "Ro": responseObj
          }
          SendMessage("WebGLResponse", "paymentResponseSuccess", JSON.stringify(msg));
        }
      });
    }

    function sendSaveRequest(key, object) {
      console.log("sendSaveRequet: " + key);
      var params = {};
      params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
      params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
      params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues({
        data: object
      });
      params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
      gadgets.io.makeRequest("http://aom18-sandbox.ignite-ga.me/api/route/setByClass?class_name=" + key, function(obj) {
        console.log("sendSaveRequest callback: " + key);
        var responseObj = {
          "Text": obj.text,
          "Rc": obj.rc
        };
        var msg = {
          "Key": key,
          "Ro": responseObj
        }
        SendMessage("WebGLResponse", "saveResponse", JSON.stringify(msg));
      }, params);
    }

    function sendGetRequest(key) {
      console.log("sendGetRequet: " + key);
      var params = {};
      params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;
      params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
      params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues({});
      params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
      gadgets.io.makeRequest("http://aom18-sandbox.ignite-ga.me/api/route/getByClass?class_name=" + key, function(obj) {
        console.log("sendGetRequest callback: " + key);
        var responseObj = {
          "Text": obj.text,
          "Rc": obj.rc
        };
        var msg = {
          "Key": key,
          "Ro": responseObj
        }
        SendMessage("WebGLResponse", "loadResponse", JSON.stringify(msg));
      }, params);
    }

    var nutakuUser = null;

    function queryNutakuUser() {
      console.log("query nutaku user");
      if(nutakuUser != null){
        return Promise.resolve(nutakuUser);
      } else {
        return new Promise((resolve, reject) => {
          var req = opensocial.newDataRequest();
          req.add(req.newFetchPersonRequest(opensocial.IdSpec.PersonId.VIEWER), "viewer");
          req.send(function(response) {
            if (response.hadError()) {
              window.alert("can not query user from api server");
              reject("can not query user from api server");
            } else {
              var item = response.get("viewer");
              if (item.hadError()) {
                window.alert("error for getting viewer in response");
                reject("error for getting viewer in response");
              } else {
                nutakuUser = item.getData();
                resolve(nutakuUser)
              }
            }
          });  
        });
      }
    };

    function sendLoginRequest() {
      console.log("sendLoginRequest");
      var requestURL = "http://aom18-sandbox.ignite-ga.me/api/Player/loginById";
      function doSendRequest() {
        var params = {};
        params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;
        params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
        params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues({});
        params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
        gadgets.io.makeRequest(requestURL, function(obj) {
          console.log("sendLoginRequest callback");
          var responseObj = {
            "Text": obj.text,
            "Rc": obj.rc
          };
          SendMessage("WebGLResponse", "loginResponse", JSON.stringify(responseObj));
        }, params);
      };
      if (nutakuUser != null) {
        var id = nutakuUser.getId();
        var displayName = nutakuUser.getDisplayName();
        console.log("displayName: " + displayName);
        if (typeof displayName === 'string' || displayName instanceof String) {
          requestURL = requestURL + "?displayName=" + displayName;
        }
        doSendRequest();
      } else {
        var req = opensocial.newDataRequest();
        req.add(req.newFetchPersonRequest(opensocial.IdSpec.PersonId.VIEWER), "viewer");
        req.send(function(response) {
          if (response.hadError()) {
            // error
          } else {
            var item = response.get("viewer");
            if (item.hadError()) {
              // error
            } else {
              var viewer = item.getData();
              var id = viewer.getId();
              var displayName = viewer.getDisplayName();
              console.log("displayName: " + displayName);
              if (typeof displayName === 'string' || displayName instanceof String) {
                requestURL = requestURL + "?displayName=" + displayName;
              }
            }
          }
          doSendRequest();
        });
      };
    }

    gadgets.util.registerOnLoadHandler(init);

    function isPrivateMode() {
      return new Promise((resolve) => {
        const on = () => resolve(true); // is in private mode
        const off = () => resolve(false); // not private mode
        const testLocalStorage = () => {
          try {
            if (localStorage.length) off();
            else {
              localStorage.x = 1;
              localStorage.removeItem('x');
              off();
            }
          } catch (e) {
            // Safari only enables cookie in private mode
            // if cookie is disabled then all client side storage is disabled
            // if all client side storage is disabled, then there is no point
            // in using private mode
            navigator.cookieEnabled ? on() : off();
          }
        };
        // Chrome & Opera
        if (window.webkitRequestFileSystem) {
          return void window.webkitRequestFileSystem(0, 0, off, on);
        }
        // Firefox
        if ('MozAppearance' in document.documentElement.style) {
          const db = indexedDB.open('test');
          db.onerror = on;
          db.onsuccess = off;
          return void 0;
        }
        // Safari
        if (/constructor/i.test(window.HTMLElement)) {
          return testLocalStorage();
        }
        // IE10+ & Edge
        if (!window.indexedDB && (window.PointerEvent || window.MSPointerEvent)) {
          return on();
        }
        // others
        return off();
      });
    };

   </script>
    <!--button onclick="makeSignedRequest()">Make Signed Request</button>
    <button onclick="requestPayment()">Request Payment</button-->
    
    <link rel="stylesheet" href="http://aomhcdn.ignite-ga.me/release/TemplateData/style.css">
    <link rel="shortcut icon" href="http://aomhcdn.ignite-ga.me/release/TemplateData/favicon.ico" />
    <script src="http://aomhcdn.ignite-ga.me/release/TemplateData/UnityProgress.js"></script>

    <!-- <div style="background: url('http://aomhcdn.ignite-ga.me/release/TemplateData/background003.jpg') no-repeat top center; width: 100%; "> -->
    <div style="background: url('http://aomhcdn.ignite-ga.me/halloween/halloween_BG.jpg') no-repeat top center; width: 100%; ">
      <div style="width: 960px; padding-top: 200px; padding-bottom: 182px; display: block; margin-right: auto; margin-left: auto;">
        <canvas class="emscripten" id="canvas" oncontextmenu="event.preventDefault()" height="640px" width="960px"></canvas>
        <br>
        <div class="logo"></div>
        <!-- <div class="fullscreen"><img src="http://aomhcdn.ignite-ga.me/release/TemplateData/fullscreen.png" width="38" height="38" alt="Fullscreen" title="Fullscreen" onclick="SetFullscreen(1); setAspectRatio();" /></div> -->
        <div class="fullscreen"></div>
        <div class="title"></div>
        <br>
        <br>
        <div align="center">Server Maintenance : October 17th, 08:00-11:00(GMT)</div>
        <br>
        <div align="center"><img src="http://aomhcdn.ignite-ga.me/halloween/20171017_Halloween_Tips.jpg" width="690" height="303"/></div>
      </div>
    </div>
    <div style="clear: both;"></div>
    <script type='text/javascript'>

    function myCompatbilityCheck() {
      CompatibilityCheck();
      isPrivateMode().then(isPrivate => {
        queryNutakuUser().then(user => {
          var xmlHttp = new XMLHttpRequest();
          var recordUrl = "http://aom18-sandbox.ignite-ga.me/api/Player/recordPlayMode?playerId=" + user.getId() + "&inPrivateMode="+isPrivate;
          xmlHttp.open("GET", recordUrl, true);
          xmlHttp.send(null);
        });
        if (isPrivate) {
          //window.alert("Please open this game in non-private mode" );
          //window.location = "https://www.nutaku.net/games/attack-on-moe-h/";
          //window.history.back();
        }

      });
    };
    var Module = {
      TOTAL_MEMORY: 268435456,
      errorhandler: null, // arguments: err, url, line. This function must return 'true' if the error is handled, otherwise 'false'
      compatibilitycheck: myCompatbilityCheck,
      backgroundColor: "#808080",
      splashStyle: "Light",
      dataUrl: "http://aomhcdn.ignite-ga.me/release/Release_TestEvent3/aom-r18.data",
      codeUrl: "http://aomhcdn.ignite-ga.me/release/Release_TestEvent3/aom-r18.js",
      asmUrl: "http://aomhcdn.ignite-ga.me/release/Release_TestEvent3/aom-r18.asm.js",
      memUrl: "http://aomhcdn.ignite-ga.me/release/Release_TestEvent3/aom-r18.mem",
    }; 
    </script>

    <script src="http://aomhcdn.ignite-ga.me/release/Release_TestEvent3/UnityLoader.js"></script>
    ]]>
  </Content>
</Module >